
name: 'Terraform and Deploy'

on:
  push:
    branches:
    - Main
  pull_request:

env:
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  

jobs:
  terraform:
    name: 'Run Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.25

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
     
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var 'resource_prefix=${{ secrets.RESOURCE_PREFIX }}' -var 'mongodb_password=${{ secrets.MONGODB_PASSWORD }}' -var 'mssql_password=${{ secrets.MSSQL_PASSWORD }}' -var 'subscription_id=${{ secrets.SUBSCRIPTION_ID }}'
    
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/Main' && github.event_name == 'push'
      run: terraform apply -auto-approve -var 'resource_prefix=${{ secrets.RESOURCE_PREFIX }}' -var 'mongodb_password=${{ secrets.MONGODB_PASSWORD }}' -var 'mssql_password=${{ secrets.MSSQL_PASSWORD }}' -var 'subscription_id=${{ secrets.SUBSCRIPTION_ID }}'

#   Commented out deploy to WebApp, changing to Docker build and ACR publish for Challenge 4
#
#   deploy:
#     name: 'Configure Deployment Center'
#     runs-on: ubuntu-latest
#     needs: terraform
    
#     steps:
#     - name: Azure Login 
#       uses: azure/login@v1
#       with:
#         creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

#     - name: Azure CLI script
#       uses: azure/CLI@v1
#       with:
#         inlineScript: |
#           az webapp deployment source config --branch ${{ secrets.REPO_BRANCH }} --manual-integration --name ${{ secrets.RESOURCE_PREFIX }}-WebApp --repo-url ${{ secrets.REPO_URL }} --resource-group ${{ secrets.RESOURCE_PREFIX }}-RG

# # Azure logout 
#     - name: Azure Logout
#       run: |
#         az logout

  build:
    name: 'Build and Deploy Docker Image to ACR'
    runs-on: ubuntu-latest
    needs: terraform

    steps:
    - name: 'Checkout GitHub Action' 
      uses: actions/checkout@v2
      with:
        repository: MBOps/AzureEats-Website
    
    - uses: azure/docker-login@v1
      with:
        login-server: azureeatsacr.azurecr.io
        username: ${{ secrets.CLIENT_ID }}
        password: ${{ secrets.CLIENT_SECRET }}

    # - name: Docker Build and Push to ACR
    #   working-directory: Source/Tailwind.Traders.Web
    #   run: | 
    #     docker build . -t azureeatsacr.azurecr.io/web
    #     docker push azureeatsacr.azurecr.io/web

    - name : Set AKS Context
      uses: azure/aks-set-context@v1
      with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}' # Azure credentials
          resource-group: ${{ secrets.RESOURCE_PREFIX }}-RG
          cluster-name: ${{ secrets.RESOURCE_PREFIX }}-AKS
      id: login

    - name: Install Helm
      uses: azure/setup-helm@v1

    - name: Run Helm Chart
      run: |
        helm install azureeatsweb ./Deploy/helm/web -f ./Deploy/helm/web/values.yaml -f ./Deploy/helm/gvalues.yaml --set ingress.hosts={azure-eats-aks} -f ./Deploy/helm/values.b2c.yaml